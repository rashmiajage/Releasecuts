package com.example.jenkinsdemo.service;

import com.cdancy.jenkins.rest.JenkinsClient;
import com.cdancy.jenkins.rest.domain.build.BuildInfo;
import com.cdancy.jenkins.rest.domain.job.JobList;
import com.cdancy.jenkins.rest.domain.queue.Executable;
import com.cdancy.jenkins.rest.domain.queue.QueueItem;
import com.cdancy.jenkins.rest.features.BuildsApi;
import com.cdancy.jenkins.rest.features.JobsApi;
import com.cdancy.jenkins.rest.features.QueueApi;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.Optional;

@Service
public class JenkinsService {

    private final String jenkinsUrl = "http://localhost:8080";
    private final String username = "admin";
    private final String apiToken = "your-api-token";

    public String triggerBuildAndMonitor(String jobName, Map<String, String> params) {
        JenkinsClient client = JenkinsClient.builder()
                .endPoint(jenkinsUrl)
                .credentials(username + ":" + apiToken)
                .build();

        JobsApi jobsApi = client.api().jobsApi();
        QueueApi queueApi = client.api().queueApi();
        BuildsApi buildsApi = client.api().buildsApi();

        // 1. Trigger build
        Optional<QueueItem> queueItemOptional = jobsApi.buildWithParameters(null, jobName, params);

        if (queueItemOptional.isEmpty() || queueItemOptional.get().id() == null) {
            return "‚ùå Failed to trigger build.";
        }

        Integer queueId = queueItemOptional.get().id();
        System.out.println("‚úÖ Build queued. Queue ID: " + queueId);

        // 2. Wait for build number to be assigned
        Optional<Executable> executable = Optional.empty();
        int retry = 0;

        while (executable.isEmpty() && retry++ < 20) {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException ignored) {}

            Optional<QueueItem> item = queueApi.queueItem(queueId);
            if (item.isPresent()) {
                executable = item.get().executable();
            }
        }

        if (executable.isEmpty()) {
            return "‚ö†Ô∏è Timed out waiting for build to start.";
        }

        int buildNumber = executable.get().number();
        System.out.println("üöÄ Build started: #" + buildNumber);

        // 3. Wait for build to complete
        BuildInfo buildInfo;
        do {
            try {
                Thread.sleep(5000);
            } catch (InterruptedException ignored) {}
            buildInfo = buildsApi.buildInfo(null, jobName, buildNumber);
        } while (buildInfo.building());

        return String.format("""
                ‚úÖ Build Completed!
                Build Number: %d
                Result      : %s
                URL         : %s
                """,
                buildNumber,
                buildInfo.result(),
                buildInfo.url()
        );
    }
}
