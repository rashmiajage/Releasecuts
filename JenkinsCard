import React, { Component } from 'react';

class JenkinsCard extends Component {
  constructor(props) {
    super(props);
    this.state = {
      status: 'Pending',
      progress: 0,
      buildUrl: '',
      consoleUrl: '',
      isPolling: false,
    };
    this.intervalId = null;
  }

  triggerBuild = async () => {
    const { jobName } = this.props;
    this.setState({ status: 'Triggering...', progress: 0 });

    try {
      const res = await fetch('http://localhost:5000/jenkins/build', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jobName }),
      });

      const data = await res.json();

      if (data.error) throw new Error(data.error);

      this.setState({
        buildUrl: data.buildUrl,
        status: 'Running',
        isPolling: true,
      });

      this.pollStatus(jobName, data.buildNumber);
    } catch (err) {
      console.error(err);
      this.setState({ status: 'Error', isPolling: false });
    }
  };

  pollStatus = (jobName, buildNumber) => {
    if (this.state.isPolling) return;

    this.setState({ isPolling: true });

    this.intervalId = setInterval(async () => {
      try {
        const res = await fetch(
          `http://localhost:5000/jenkins/status?jobName=${jobName}&buildNumber=${buildNumber}`
        );
        const data = await res.json();

        this.setState({
          status: data.status,
          progress: data.progress,
          consoleUrl: data.consoleUrl,
        });

        if (data.status === 'SUCCESS' || data.status === 'FAILURE') {
          clearInterval(this.intervalId);
          this.setState({ isPolling: false });
        }
      } catch (err) {
        console.error('Polling failed', err);
        clearInterval(this.intervalId);
        this.setState({ isPolling: false });
      }
    }, 5000);
  };

  componentWillUnmount() {
    if (this.intervalId) clearInterval(this.intervalId);
  }

  render() {
    const { jobName } = this.props;
    const { status, progress, buildUrl, consoleUrl } = this.state;

    return (
      <div className="card">
        <h3>{jobName}</h3>
        <p>Status: <strong>{status}</strong></p>
        <p>Progress: {progress}%</p>

        {buildUrl && (
          <p>
            Build URL:{' '}
            <a href={buildUrl} target="_blank" rel="noopener noreferrer">
              View
            </a>
          </p>
        )}

        {consoleUrl && (
          <p>
            Logs:{' '}
            <a href={consoleUrl} target="_blank" rel="noopener noreferrer">
              View Console
            </a>
          </p>
        )}

        <button onClick={this.triggerBuild}>Trigger Build</button>
      </div>
    );
  }
}

export default JenkinsCard;
